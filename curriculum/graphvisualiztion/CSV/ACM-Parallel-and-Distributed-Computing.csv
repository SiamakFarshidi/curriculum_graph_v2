courseid,chapterid,sectionid,unitid,subunitid,-,topic,-,chapter,-,Cognitive level,-,description_of_topic,-
11,,,,,,Parallel and Distributed Computing,,,,,,,
11,1,,,,,Programs and Executions,,Programs and Executions,,,,,
11,1,1,,,,Definitions and Properties,,Programs and Executions,,Explain,,,
11,1,1,1,,,Parallelizable actions,,Programs and Executions,,Explain,,"1, Including closures, functions, and services. 2, Composite actions; sessions, tasks; scopes. 3, Naming or identifying actions as parties (for example thread IDs). 4, Impact of granularity and overhead ",
11,1,1,2,,,Ordering ampng actions; happens-before relations,,Programs and Executions,,Explain,,Relaxing ordering constraints permits nondeterministic execution of the series/parallel directed acyclic graphs representing program components,
11,1,1,3,,,Independence,,Programs and Executions,,Explain,,"determining when ordering doesn't matter in terms of commutativity, dependencies, preconditions",
11,1,1,4,,,Consistency,,Programs and Executions,,Explain,,"Agreement about values and predicates; races, atomicity, consensus",
11,1,1,5,,,Ensuring ordering when necessary in parallel programs,,Programs and Executions,,Explain,,"For example locking, safe publication ",
11,1,1,6,,,Places,,Programs and Executions,,Explain,,Physical devices executing parallel actions (parties),
11,1,1,7,,,Faults arising from failures in parties or communication,,Programs and Executions,,Explain,,,
11,1,2,,,,Starting parallel actions,,Programs and Executions,,Explain,,,
11,1,2,1,,,Placement,,Programs and Executions,,Explain,,arranging that the action be performed (eventually) by a designated party,
11,1,2,2,,,Procedural,,Programs and Executions,,Explain,,"Enabling multiple actions tstart at a given program point. For example, starting new threads",
11,1,2,3,,,Reactive,,Programs and Executions,,Explain,,"Enabling upon an event. For example, installing event handlers",
11,1,2,4,,,Dependent,,Programs and Executions,,Explain,,"Enabling upon completion of others. For example, sequencing",
11,1,3,,,,Underlying mappings and mechanisms,,Programs and Executions,,Explain,,,
11,1,3,1,,,CPU data- and instruction-level-parallelism,,Programs and Executions,,Explain,,,
11,1,3,2,,,SIMD and heterogeneous data parallelism,,Programs and Executions,,Explain,,,
11,1,3,3,,,"Multicore scheduled concurrency, tasks, actors",,Programs and Executions,,Explain,,,
11,1,3,4,,,"Clusters, clouds; elastic provisioning",,Programs and Executions,,Explain,,,
11,1,3,5,,,Distributed systems with unbounded participants,,Programs and Executions,,Explain,,,
11,1,3,6,,,Emerging technologies such as quantum computing and molecular computing,,Programs and Executions,,Explain,,,
11,2,,,,,Communication,,Communication,,,,,
11,2,1,,,,Fundamentals: Media,,Communication,,Explain,,,
11,2,1,1,,,Varieties,,Communication,,Explain,,"channels (message passing or lO), Shared memory, heterogeneous, data stores",
11,2,1,2,,,"Reliance on the availability and nature of underlying hardware, connectivity, and protocols; language support, emulation",,Communication,,Explain,,,
11,2,2,,,,Fundamentals: Channels,,Communication,,Explain,,,
11,2,2,1,,,Explicit party‐to‐party communication; naming,,Communication,,Explain,,,
11,2,2,2,,,APIs,,Communication,,Explain,,"sockets, architectural and language‐based channel constructs",
11,2,3,,,,Fundamentals: Memory,,Communication,,Explain,,,
11,2,3,1,,,Architectures in which parties directly communicate only with memory at given addresses,,Communication,,Explain,,,
11,2,3,2,,,Consistency,,Communication,,Explain,,"Bitwise atomicity limits, coherence, local ordering",
11,2,3,3,,,"Memory hierarchies, locality",,Communication,,Explain,,"caches, latency, false‐sharing",
11,2,3,4,,,"Heterogeneous Memory using multiple memory stores, with explicit data transfer across them; ",,Communication,,Explain,,"for example, GPU local and shared memory, DMA",
11,2,3,5,,,"Multiple layers of sharing domains, scopes and caches",,Communication,,Explain,,,
11,2,4,,,,Fundamentals: Data Stores,,Communication,,Explain,,,
11,2,4,1,,,"Cooperatively maintained structured data implementing maps, sets, and related ADTs",,Communication,,Explain,,,
11,2,4,2,,,Varieties,,Communication,,Explain,,"Owned, shared, sharded, replicated, immutable, versioned",
11,2,5,,,,Programming with Communication,,Communication,,Develop,,,
11,2,5,1,,,"Using channel, socket, and/or remote procedure APIs",,Communication,,Develop,,,
11,2,5,2,,,Using shared memory constructs in a given language,,Communication,,Develop,,,
11,2,6,,,,Properties and Extensions: Media,,Communication,,Explain,,,
11,2,6,1,,,Topologies,,Communication,,Explain,,"Unicast, Multicast, Mailboxes, Switches; Routing",
11,2,6,2,,,Concurrency properties,,Communication,,Explain,,"Ordering, consistency, idempotency, overlapping with computation",
11,2,6,3,,,Reliability,,Communication,,Explain,,transmission errors and drops.,
11,2,6,4,,,"Data tormats, marshaling",,Communication,,Explain,,,
11,2,6,5,,,Protocol design,,Communication,,Explain,,"progress guarantees, deadlocks",
11,2,6,6,,,Security,,Communication,,Explain,,"integrity, privacy, authentication, authorization.",
11,2,6,7,,,Performance Characteristics,,Communication,,Explain,,"Latency, Bandwidth (throughput), Contention (congestion), Responsiveness (liveness).",
11,2,6,8,,,Applications of Queuing Theory tmodel and predict performance,,Communication,,Explain,,,
11,2,7,,,,Properties and Extensions: Channels,,Communication,,Explain,,,
11,2,7,1,,,Policies,,Communication,,Explain,,"Endpoints, Sessions, Buffering, Saturation response (waiting vs dropping), Rate control",
11,2,7,2,,,Program control for sending (usually procedural) vs ceiving.(usually reactive or RPC-based),,Communication,,Explain,,,
11,2,7,3,,,"Formats, marshaling, validation, encryption, compresslon",,Communication,,Explain,,,
11,2,7,4,,,"Multiplexing and demultiplexing in contexts with many relatively slow Idevices or parties; completion-based and scheduler-based techniques; async-await, select and polling APls.",,Communication,,Explain,,,
11,2,7,5,,,Formalization and analysis;,,Communication,,Explain,,for example using CSP,
11,2,8,,,,Properties and Extensions: Memory,,Communication,,Explain,,,
11,2,8,1,,,Memory models: sequential and release/acquire consistency,,Communication,,Explain,,,
11,2,8,2,,,Memory management; including reclamation of shared data; reference counts and alternatives,,Communication,,Explain,,,
11,2,8,3,,,Bulk data placement and transfer; ,,Communication,,Explain,,reducing message traffic and improving locality; overlapping data transfer and computation; impact of data layout such as array-of-structs vs struct-of-arrays,
11,2,8,4,,,"Emulating shared memory: distributed shared memory, RDMA",,Communication,,Explain,,,
11,2,9,,,,Properties and Extensions: Data Stores,,Communication,,Explain,,,
11,2,9,1,,,Consistency,,Communication,,Explain,,"atomicity, linearizability, transactionality, coherence, causal ordering, conflict resolution, eventual consistency, blockchains,",
11,2,9,2,,,Faults and partial failures; voting; protocols such as Paxos and Raft ,,Communication,,Explain,,,
11,2,9,3,,,"Security and trust: Byzantine failures, proof of work and alternatives",,Communication,,Explain,,,
11,3,,,,,Coordination ,,Coordination ,,,,,
11,3,1,,,,Fundamentals: Dependent actions,,Coordination ,,Explain,,,
11,3,1,1,,,Execution control when one activity's initiation or progress depends on actions of others,,Coordination ,,Explain,,,
11,3,1,2,,,Completion-based,,Coordination ,,Explain,,"Barriers, joins",
11,3,1,3,,,Data-enabled,,Coordination ,,Explain,,Produce-Consumer designs,
11,3,1,4,,,Condition-based,,Coordination ,,Explain,,"Polling, retrying, backoffs, helping, suspension, queueing, signaling, timeouts",
11,3,1,5,,,Reactive,,Coordination ,,Explain,,enabling and triggering continuations,
11,3,2,,,,Fundamentals:Progress,,Coordination ,,Explain,,Progress,
11,3,2,1,,,Dependency cycles and deadlock; monotonicity of conditions,,Coordination ,,Explain,,,
11,3,3,,,,Fundamentals: Atomicity,,Coordination ,,Explain,,,
11,3,3,1,,,"Atomic instructions, enforced local access orderings",,Coordination ,,Explain,,,
11,3,3,2,,,Locks and mutual exclusion,,Coordination ,,Explain,,,
11,3,3,3,,,Deadlock avoidance,,Coordination ,,Explain,,"ordering, coarsening, randomized retries; encapsulation via lock managers",
11,3,3,4,,,Common errors,,Coordination ,,Explain,,"failing tlock or unlock when necessary, holding locks while invoking unknown operations, deadlock",
11,3,4,,,,Programming with coordination,,Coordination ,,Develop,,,
11,3,4,1,,,Controlling termination,,Coordination ,,Develop,,,
11,3,4,2,,,"Using locks, barriers, and other synchronizers in a given language; maintaining liveness without introducing races",,Coordination ,,Develop,,,
11,3,4,3,,,Using transactional APIs in a given framework,,Coordination ,,Develop,,,
11,3,5,,,,Properties and extensions: Progress,,Coordination ,,Explain,,,
11,3,5,1,,,"Properties including lock-free, wait-free, fairness, priority scheduling; interactions with consistency, reliability",,Coordination ,,Explain,,,
11,3,5,2,,,Performance,,Coordination ,,Explain,,"contention, granularity, convoying, scaling",
11,3,5,3,,,Non-blocking data structures and algorithms,,Coordination ,,Explain,,,
11,3,6,,,,Properties and extensions: Atomicity,,Coordination ,,Explain,,,
11,3,6,1,,,Ownership and resource control,,Coordination ,,Explain,,,
11,3,6,2,,,Lock variants,,Coordination ,,Explain,,"sequence locks, read‐write locks; reentrancy; tickets",
11,3,6,3,,,Transaction‐based control,,Coordination ,,Explain,,Optimistic and conservative,
11,3,6,4,,,Distributed locking,,Coordination ,,Explain,,reliability,
11,3,7,,,,Properties and extensions: Interaction with other forms of program control,,Coordination ,,Explain,,,
11,3,7,1,,,Alternatives tbarriers,,Coordination ,,Explain,,"Clocks; Counters, virtual clocks; Dataflow and continuations; Futures and RPC; Consensus-based, Gathering results with reducers and collectors",
11,3,7,2,,,"Speculation, selection, cancellation; observability and security consequences",,Coordination ,,Explain,,,
11,3,7,3,,,Resource-based,,Coordination ,,Explain,,Semaphores and condition variables,
11,3,7,4,,,Control flow,,Coordination ,,Explain,,"Scheduling computations, Series-parallel loops with (possibly elected) leaders, Pipelines and Streams, nested parallelism.",
11,3,7,5,,,"Exceptions and failures. Handlers, detection, timeouts, fault tolerance, voting ",,Coordination ,,Explain,,,
11,4,,,,,Software Engineering,,Software Engineering,,,,,
11,4,1,,,,"Safety, liveness and performance requirements",,Software Engineering,,Explain,,,
11,4,1,1,,,Temporal logic constructs texpress “always” and “eventually”,,Software Engineering,,Explain,,,
11,4,1,2,,,"Metrics for throughput, responsiveness, latency, availability, energy consumption, scalability, resource usage, communication costs, waiting and rate control, fairness; service level agreements ",,Software Engineering,,Explain,,,
11,4,2,,,,"Identifying, testing for, and repairing violations",,Software Engineering,,Evaluate,,,
11,4,2,1,,,Common forms of errors,,Software Engineering,,Evaluate,,"failure tensure necessary ordering (race errors), atomicity (including check‐then‐act errors), or termination (livelock).",
11,4,3,,,,Specification and Evaluation: Formal Specification,,Software Engineering,,Evaluate,,,
11,4,3,1,,,"Extensions of sequential requirements such as linearizability; protocol, session, and transactional specifications",,Software Engineering,,Evaluate,,,
11,4,3,2,,,"Use of tools such as UML, TLA, program logics",,Software Engineering,,Evaluate,,,
11,4,3,3,,,Security,,Software Engineering,,Evaluate,,"safety and liveness in the presence of hostile or buggy behaviors by other parties; required properties of communication mechanisms (for example lack of cross-layer leakage), input screening, rate limiting",
11,4,4,,,,Specification and Evaluation: Static Analysis,,Software Engineering,,Evaluate,,,
11,4,4,1,,,"For correctness, throughput, latency, resources, energy",,Software Engineering,,Evaluate,,,
11,4,4,2,,,"dag model analysis of algorithmic efficiency (work, span, critical paths)",,Software Engineering,,Evaluate,,,
11,4,5,,,,Specification and Evaluation: Empirical Evaluation,,Software Engineering,,Evaluate,,,
11,4,5,1,,,Testing and debugging,,Software Engineering,,Evaluate,,"tools such as race detectors, fuzzers, lock dependency checkers, unit/stress/torture tests, continuous integration, continuous deployment, and test generators",
11,4,5,2,,,Performance analysis and comparison,,Software Engineering,,Evaluate,,"Measuring and comparing throughput, overhead, waiting, contention, communication, data movement, locality, resource usage, behavior in the presence of tomany events, clients, threads. ",
11,4,6,,,,Application domain specific analyses and evaluation techniques,,Software Engineering,,Evaluate,,,
11,5,,,,,Algorithms and applications,,Algorithms and applications,,,,,
11,5,1,,,,Implementing concepts in given languages and frameworks,,Algorithms and applications,,Develop,,"to initiate activities (for example threads), use shared memory constructs, and channel, socket, and/or remote procedure call APIs",
11,5,2,,,,Linear Algebra,,Algorithms and applications,,Develop,,"Vector and Matrix operations, numerical precision/stability, applications in data analytics and machine learning",
11,5,3,,,,Data processing,,Algorithms and applications,,Develop,,"sorting, searching and retrieval, concurrent data structures",
11,5,4,,,,"Graphs, search, and combinatorics",,Algorithms and applications,,Develop,,"Marking, edge‐parallelization, bounding, speculation, network‐based analytics",
11,5,5,,,,Modeling and simulation,,Algorithms and applications,,Develop,,"differential equations; randomization, N‐body problems, genetic algorithms",
11,5,6,,,,Logic,,Algorithms and applications,,Develop,,"SAT, concurrent logic programming",
11,5,7,,,,Graphics and computational geometry,,Algorithms and applications,,Develop,,"Transforms, rendering, ray‐tracing",
11,5,8,,,,Resource Management,,Algorithms and applications,,Develop,,"Allocating, placing, recycling and scheduling processors, memory, channels, and hosts. Exclusive vs shared resources. Static, dynamic and elastic algorithms, Batching, prioritization, partitioning, decentralization via work‐ stealing and related techniques",
11,5,9,,,,Services,,Algorithms and applications,,Develop,,"Implementing Web APIs, Electronic currency, transaction systems, multiplayer games",